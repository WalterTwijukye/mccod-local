import { Component, ViewEncapsulation, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import 'node_modules/bootstrap/';
import { NgForm } from '@angular/forms';
import { IndexeddbService } from '../indexeddb.service';
import * as ECT from "@whoicd/icd11ect";
import { FacilityService } from '../facility.service';
import { FacilityData } from '../facility.model';
import { JsonParserService } from 'src/json-parser.service';
import { ElementRef } from '@angular/core';



@Component({
  selector: 'app-med-form-death',
  templateUrl: './med-form-death.component.html',
  styleUrls: ['./med-form-death.component.css',]
})
export class MedFormDeathComponent implements OnInit {

  isICD11ToolOpen: boolean = true; // Property to track if the ICD11 tool is open
  facilities: { id: string, name: string }[] = [];
  selectedFacilityId!: string;

  underlyingCauseValue: string = '';
  underlyingCauseCode: string = '';

  report!: '';

  formData = {

    icd: '',

    lastSurg: '',
    dateSurg: '',
    reason: '',
    autReq: '',
    findings: '',

    pod: '',

    extCauseOcc: '',
    placeOcc: '',

    multPreg: '',

    hrsSurv: '',

    pregWeeks: '',
    ageMot: '',
    perinatalDeath: '',

    deceasedPreg: '',
    whatPoint: '',
    deathByPreg: '',

    modeDelivery: '',
    placeDelivery: '',
    delSkillAtt: '',
    other: '',


    facility: '',

    conductPostMortem: '',
    sentToApi: false,

    MOH_National_Case_Number: '',
    NIN: '',
    Inpatient_Number: '',
    Name: '',

    Region: '',
    District: '',
    County: '',
    Sub_County: '',
    Village: '',
    Occupation: '',
    Date_Of_Birth_Known: '',
    Date_Of_Birth: '',

    Age: {
      Years: '',
      Months: '',
      Days: '',
      Hours: '',
      Minutes: ''

    },
    Sex: '',
    Date_Time_Of_Death: '',

    causeOfDeath1: '',
    code1: '',
    causeOfDeathFreeText1: '',
    Time_Interval_From_Onset_To_Death1: {
      Time_Interval_Unit1: '',
      Time_Interval_Qtty1: ''
    },
    causeOfDeath2: '',
    code2: '',
    causeOfDeathFreeText2: '',
    Time_Interval_From_Onset_To_Death2: {
      Time_Interval_Unit2: '',
      Time_Interval_Qtty2: ''
    },
    causeOfDeath3: '',
    code3: '',
    causeOfDeathFreeText3: '',
    Time_Interval_From_Onset_To_Death3: {
      Time_Interval_Unit3: '',
      Time_Interval_Qtty3: ''
    },
    causeOfDeath4: '',
    code4: '',
    causeOfDeathFreeText4: '',
    Time_Interval_From_Onset_To_Death4: {
      Time_Interval_Unit4: '',
      Time_Interval_Qtty4: ''
    },
    causeOfDeath5: '',
    code5: '',
    causeOfDeathFreeText5: '',
    causeOfDeath6: '',
    code6: '',
    causeOfDeathFreeText6: '',
    causeOfDeath7: '',
    code7: '',
    causeOfDeathFreeText7: '',
    causeOfDeath8: '',
    code8: '',
    causeOfDeathFreeText8: '',
    causeOfDeath9: '',
    code9: '',
    causeOfDeathFreeText9: '',

    State_Underlying_Cause: '',
    Doris_Underlying_Cause: '',
    dorisCode: '',
    Final_Underlying_Cause: '',

    lastSurgeryPerformed: '',
    dateOfSurgery: '',
    reasonForSurgery: '',
    autopsyRequested: '',
    findingsInCertification: '',

    disease: '',
    accident: '',
    intentionalSelfHarm: '',
    assualt: '',
    legalIntervention: '',
    war: '',
    notDetermined: '',
    pendingInvenstigation: '',
    unknown: '',
    externalCause: '',
    dateOfInjusry: '',
    describeExternalCause: '',
    occuranceOfExternalCause: '',

    multiplePregnancy: '',
    stillBorn: '',
    numberOfHrsSurvived: '',
    birthWeight: '',
    numberOfCompletedPregWeeks: '',
    ageOfMother: '',
    conditionsDeathPerinatal: '',

    wasDeceasedPreg: '',
    atWhatPoint: '',
    didPregancyContributeToDeath: '',
    parity: '',
    modeOfDelivery: '',
    placeOfDelivery: '',
    deliveredBySkilledAttendant: '',

    I_Attended_Deceased: '',
    I_Examined_Body: '',
    I_Conducted_PostMortem: '',
    Other: '',
    examinedBy: ''

  }

  codes: string[] = []; // Array to store codes
  
  constructor(
    private indexeddbService: IndexeddbService,
    private jsonParserService: JsonParserService,
    private facilityService: FacilityService,
    private http: HttpClient,
    private elementRef: ElementRef
  ) { }

  ngOnInit(): void {
    // Listen for online and offline events
    window.addEventListener('online', () => this.onNetworkStatusChange(true));
    window.addEventListener('offline', () => this.onNetworkStatusChange(false));

    this.facilityService.getFacilities().then((facilityData: FacilityData) => {
      this.facilities = facilityData.organisationUnits;
    });

    const mySettings = {
      // apiServerUrl: "https://icd11restapi-developer-test.azurewebsites.net",
      apiServerUrl: "http://localhost:8382/",
      height: "60vh"
    };

    const myCallbacks = {

      selectedEntityFunction: (selectedEntity: any) => {

        let value = `causeOfDeath${selectedEntity.iNo}`;
        let code = `code${selectedEntity.iNo}`;
        (this.formData as any)[value] = selectedEntity.bestMatchText;
        (this.formData as any)[code] = selectedEntity.code;

        this.underlyingCauseValue = selectedEntity.bestMatchText;
        this.underlyingCauseCode = selectedEntity.code;
        console.log(selectedEntity);
        // Push the selected entity's code to the array of codes
        this.codes[selectedEntity.iNo - 1] = selectedEntity.code;
        console.log('Codes:', this.codes);
        this.enableDoris(this.codes);


        ECT.Handler.clear(selectedEntity.iNo);

      },

    };

    ECT.Handler.configure(mySettings, myCallbacks);
    // ECT.Handler.bind("1");
    ECT.Handler.overwriteConfiguration("1", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("2", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("3", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("4", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("5", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("6", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("7", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("8", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });
    ECT.Handler.overwriteConfiguration("9", {
      chaptersFilter: "18;19;20;21;22;23;24;25;26",
      wordsAvailable: false
    });

    // this.enableDoris(this.formData.code1, this.formData.code2, 
    //   this.formData.code3, this.formData.code4 );

    // Initialize the array of codes with 4 empty strings
    this.codes = Array(9).fill('');

  }

  enableDoris(codes: string[]) {
    // Check if all codes are present
    if (codes.some(code => !!code || code === '')) {
      // Construct the URL with all four codes
      const url = `https://ug.sk-engine.cloud/icd-api/icd/release/11/2023-01/doris?` +
        `causeOfDeathCodeA=${codes[0]}&causeOfDeathCodeB=${codes[1]}` +
        `&causeOfDeathCodeC=${codes[2]}&causeOfDeathCodeD=${codes[3]}` +
        `&causeOfDeathCodeE=${codes[4]}&causeOfDeathCodeF=${codes[5]}` +
        `&causeOfDeathCodeG=${codes[6]}&causeOfDeathCodeH=${codes[7]}` +
        `&causeOfDeathCodeI=${codes[8]}}`;
      const headers = new HttpHeaders().set('API-Version', 'v2');

      // Make the HTTP GET request
      this.http.get(url, { headers }).subscribe(
        (response: any) => {
          console.log('Doris Codes:', codes);
          console.log('Response:', response);
          // Handle the response as needed

          // Extract stemCode and Report from the response
          const stemCode = response.stemCode;
          this.report = response.report;
          // Update the dorisCode input field with the stemCode value
          // Update the dorisCode input field with the stemCode value
          console.log(stemCode);
          this.updateDorisCodeInput(stemCode);

        },
        (error) => {
          console.error('Error:', error);
        }
      );
    } else {
      console.log('At least one code should be entered.');
    }
  }

  // Function to update the dorisCode input field with the stemCode value
  private updateDorisCodeInput(stemCode: string): void {
    // Find the dorisCode input element using ElementRef
    const dorisCodeInput: HTMLInputElement | null = this.elementRef.nativeElement.querySelector('#dorisCode');

    // Update the value attribute of the input element
    if (dorisCodeInput) {
      dorisCodeInput.value = stemCode;
    } else {
      console.error('dorisCode input element not found.');
    }
  }

  onNetworkStatusChange(online: boolean): any {
    if (online) {
      this.sendPayload();
      console.log('Data succesfully resent to API');
    } else {
      console.error('No internet')
    }
  }

  submitForm(f: NgForm) {

    if (this.selectedFacilityId) {
      this.formData.facility = this.selectedFacilityId; // Save selected facility ID to formData
    } else {
      console.error('No facility selected');
      // Handle the case where no facility is selected
    }
    console.log(this.formData.facility);

    this.indexeddbService.addMedicalCertificate(this.formData).then(response => {
      console.log(response.message); // Output: "Record successfully saved"
      this.sendPayload();
      console.log(response.data); // Output: { id: 1, name: 'John Doe', NIN: '1234567890', dateOfBirth: '1990-01-01', ... }

    }).catch(error => {
      console.error(error);
    });
  }

  sendPayload() {

    // Generate DHIS2 event UID
    const generateEventUID = () => {
      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      const length = 11; // Adjust the length of the UID as needed
      let uid = '';
      for (let i = 0; i < length; i++) {
        uid += characters.charAt(Math.floor(Math.random() * characters.length));
      }
      return uid;
    };

    // Generate the event UID
    const event = generateEventUID();

    const payload = {
      event: event,
      name: this.formData.Name,
      nin: this.formData.NIN,
      // dob: this.formData.dob,
      age: this.formData.Age,
      sex: this.formData.Sex,
      // dtD: this.formData.dtD
    }

    this.jsonParserService.sendData(payload).subscribe(
      response => {
        this.formData.sentToApi = true;
        console.log('Data sent to DHIS2 successfully:', response);
      },
      error => {
        this.formData.sentToApi = false;
        console.error('Error sending data:', error);
      }
    );
  }

  onSearch() { }
}
